/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * kafka-replay-service
 * This is a simple API to replay logged or manually created JSON messages via Kafka
 *
 * OpenAPI spec version: 1.0.0
 * Contact: erik.vullings@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://127.0.0.1:8200/api/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration!: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name!: "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    topic?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    session?: string;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    timestampMsec?: number;
}

/**
 * 
 * @export
 * @interface SessionNameSessionName
 */
export interface SessionName {
}

/**
 * 
 * @export
 * @interface TopicName
 */
export interface TopicName {
}


/**
 * MessagesApi - fetch parameter creator
 * @export
 */
export const MessagesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a specific message
         * @param {string} messageID ID of the message to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDGet(messageID: string, options: any = {}): FetchArgs {
            // verify required parameter 'messageID' is not null or undefined
            if (messageID === null || messageID === undefined) {
                throw new RequiredError('messageID','Required parameter messageID was null or undefined when calling messagesMessageIDGet.');
            }
            const localVarPath = `/messages/{messageID}`
                .replace(`{${"messageID"}}`, encodeURIComponent(String(messageID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Publish the message
         * @param {string} messageID ID of the message to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDPost(messageID: string, options: any = {}): FetchArgs {
            // verify required parameter 'messageID' is not null or undefined
            if (messageID === null || messageID === undefined) {
                throw new RequiredError('messageID','Required parameter messageID was null or undefined when calling messagesMessageIDPost.');
            }
            const localVarPath = `/messages/{messageID}`
                .replace(`{${"messageID"}}`, encodeURIComponent(String(messageID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagesApi - functional programming interface
 * @export
 */
export const MessagesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a specific message
         * @param {string} messageID ID of the message to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDGet(messageID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = MessagesApiFetchParamCreator(configuration).messagesMessageIDGet(messageID, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Publish the message
         * @param {string} messageID ID of the message to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDPost(messageID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MessagesApiFetchParamCreator(configuration).messagesMessageIDPost(messageID, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MessagesApi - factory interface
 * @export
 */
export const MessagesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get a specific message
         * @param {string} messageID ID of the message to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDGet(messageID: string, options?: any) {
            return MessagesApiFp(configuration).messagesMessageIDGet(messageID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Publish the message
         * @param {string} messageID ID of the message to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDPost(messageID: string, options?: any) {
            return MessagesApiFp(configuration).messagesMessageIDPost(messageID, options)(fetch, basePath);
        },
    };
};

/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
export class MessagesApi extends BaseAPI {
    /**
     * 
     * @summary Get a specific message
     * @param {} messageID ID of the message to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public messagesMessageIDGet(messageID: string, options?: any) {
        return MessagesApiFp(this.configuration).messagesMessageIDGet(messageID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Publish the message
     * @param {} messageID ID of the message to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public messagesMessageIDPost(messageID: string, options?: any) {
        return MessagesApiFp(this.configuration).messagesMessageIDPost(messageID, options)(this.fetch, this.basePath);
    }

}

/**
 * PlayerApi - fetch parameter creator
 * @export
 */
export const PlayerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Stop playing and remove all messages from the queue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetDelete(options: any = {}): FetchArgs {
            const localVarPath = `/reset`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayerApi - functional programming interface
 * @export
 */
export const PlayerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Stop playing and remove all messages from the queue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetDelete(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PlayerApiFetchParamCreator(configuration).resetDelete(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PlayerApi - factory interface
 * @export
 */
export const PlayerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Stop playing and remove all messages from the queue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetDelete(options?: any) {
            return PlayerApiFp(configuration).resetDelete(options)(fetch, basePath);
        },
    };
};

/**
 * PlayerApi - object-oriented interface
 * @export
 * @class PlayerApi
 * @extends {BaseAPI}
 */
export class PlayerApi extends BaseAPI {
    /**
     * 
     * @summary Stop playing and remove all messages from the queue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public resetDelete(options?: any) {
        return PlayerApiFp(this.configuration).resetDelete(options)(this.fetch, this.basePath);
    }

}

/**
 * SessionsApi - fetch parameter creator
 * @export
 */
export const SessionsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all the available session names.
         * @summary Get all the sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsGet(options: any = {}): FetchArgs {
            const localVarPath = `/sessions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all the messages in a session
         * @param {string} sessionID ID of session to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsSessionIDGet(sessionID: string, options: any = {}): FetchArgs {
            // verify required parameter 'sessionID' is not null or undefined
            if (sessionID === null || sessionID === undefined) {
                throw new RequiredError('sessionID','Required parameter sessionID was null or undefined when calling sessionsSessionIDGet.');
            }
            const localVarPath = `/sessions/{sessionID}/`
                .replace(`{${"sessionID"}}`, encodeURIComponent(String(sessionID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Based on the timestamp of the original message, and the current (simulation) time, the messages are published in the original order.
         * @summary Play all the messages in the session
         * @param {string} sessionID ID of session to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsSessionIDPost(sessionID: string, options: any = {}): FetchArgs {
            // verify required parameter 'sessionID' is not null or undefined
            if (sessionID === null || sessionID === undefined) {
                throw new RequiredError('sessionID','Required parameter sessionID was null or undefined when calling sessionsSessionIDPost.');
            }
            const localVarPath = `/sessions/{sessionID}/`
                .replace(`{${"sessionID"}}`, encodeURIComponent(String(sessionID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all the messages in a session topic
         * @param {string} sessionID ID of session to return
         * @param {string} topicID ID of topic to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsSessionIDTopicIDGet(sessionID: string, topicID: string, options: any = {}): FetchArgs {
            // verify required parameter 'sessionID' is not null or undefined
            if (sessionID === null || sessionID === undefined) {
                throw new RequiredError('sessionID','Required parameter sessionID was null or undefined when calling sessionsSessionIDTopicIDGet.');
            }
            // verify required parameter 'topicID' is not null or undefined
            if (topicID === null || topicID === undefined) {
                throw new RequiredError('topicID','Required parameter topicID was null or undefined when calling sessionsSessionIDTopicIDGet.');
            }
            const localVarPath = `/sessions/{sessionID}/{topicID}/`
                .replace(`{${"sessionID"}}`, encodeURIComponent(String(sessionID)))
                .replace(`{${"topicID"}}`, encodeURIComponent(String(topicID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Based on the timestamp of the original message, and the current (simulation) time, the messages are published in the original order.
         * @summary Play all the messages in the session topic
         * @param {string} sessionID ID of session to return
         * @param {string} topicID ID of topic to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsSessionIDTopicIDPost(sessionID: string, topicID: string, options: any = {}): FetchArgs {
            // verify required parameter 'sessionID' is not null or undefined
            if (sessionID === null || sessionID === undefined) {
                throw new RequiredError('sessionID','Required parameter sessionID was null or undefined when calling sessionsSessionIDTopicIDPost.');
            }
            // verify required parameter 'topicID' is not null or undefined
            if (topicID === null || topicID === undefined) {
                throw new RequiredError('topicID','Required parameter topicID was null or undefined when calling sessionsSessionIDTopicIDPost.');
            }
            const localVarPath = `/sessions/{sessionID}/{topicID}/`
                .replace(`{${"sessionID"}}`, encodeURIComponent(String(sessionID)))
                .replace(`{${"topicID"}}`, encodeURIComponent(String(topicID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all the topics in a session
         * @param {string} sessionID ID of session to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsSessionIDTopicsGet(sessionID: string, options: any = {}): FetchArgs {
            // verify required parameter 'sessionID' is not null or undefined
            if (sessionID === null || sessionID === undefined) {
                throw new RequiredError('sessionID','Required parameter sessionID was null or undefined when calling sessionsSessionIDTopicsGet.');
            }
            const localVarPath = `/sessions/{sessionID}/topics`
                .replace(`{${"sessionID"}}`, encodeURIComponent(String(sessionID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SessionsApi - functional programming interface
 * @export
 */
export const SessionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get all the available session names.
         * @summary Get all the sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SessionName>> {
            const localVarFetchArgs = SessionsApiFetchParamCreator(configuration).sessionsGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all the messages in a session
         * @param {string} sessionID ID of session to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsSessionIDGet(sessionID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Message>> {
            const localVarFetchArgs = SessionsApiFetchParamCreator(configuration).sessionsSessionIDGet(sessionID, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Based on the timestamp of the original message, and the current (simulation) time, the messages are published in the original order.
         * @summary Play all the messages in the session
         * @param {string} sessionID ID of session to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsSessionIDPost(sessionID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SessionsApiFetchParamCreator(configuration).sessionsSessionIDPost(sessionID, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all the messages in a session topic
         * @param {string} sessionID ID of session to return
         * @param {string} topicID ID of topic to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsSessionIDTopicIDGet(sessionID: string, topicID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SessionName>> {
            const localVarFetchArgs = SessionsApiFetchParamCreator(configuration).sessionsSessionIDTopicIDGet(sessionID, topicID, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Based on the timestamp of the original message, and the current (simulation) time, the messages are published in the original order.
         * @summary Play all the messages in the session topic
         * @param {string} sessionID ID of session to return
         * @param {string} topicID ID of topic to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsSessionIDTopicIDPost(sessionID: string, topicID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SessionsApiFetchParamCreator(configuration).sessionsSessionIDTopicIDPost(sessionID, topicID, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all the topics in a session
         * @param {string} sessionID ID of session to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsSessionIDTopicsGet(sessionID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<TopicName>> {
            const localVarFetchArgs = SessionsApiFetchParamCreator(configuration).sessionsSessionIDTopicsGet(sessionID, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SessionsApi - factory interface
 * @export
 */
export const SessionsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get all the available session names.
         * @summary Get all the sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsGet(options?: any) {
            return SessionsApiFp(configuration).sessionsGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all the messages in a session
         * @param {string} sessionID ID of session to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsSessionIDGet(sessionID: string, options?: any) {
            return SessionsApiFp(configuration).sessionsSessionIDGet(sessionID, options)(fetch, basePath);
        },
        /**
         * Based on the timestamp of the original message, and the current (simulation) time, the messages are published in the original order.
         * @summary Play all the messages in the session
         * @param {string} sessionID ID of session to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsSessionIDPost(sessionID: string, options?: any) {
            return SessionsApiFp(configuration).sessionsSessionIDPost(sessionID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all the messages in a session topic
         * @param {string} sessionID ID of session to return
         * @param {string} topicID ID of topic to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsSessionIDTopicIDGet(sessionID: string, topicID: string, options?: any) {
            return SessionsApiFp(configuration).sessionsSessionIDTopicIDGet(sessionID, topicID, options)(fetch, basePath);
        },
        /**
         * Based on the timestamp of the original message, and the current (simulation) time, the messages are published in the original order.
         * @summary Play all the messages in the session topic
         * @param {string} sessionID ID of session to return
         * @param {string} topicID ID of topic to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsSessionIDTopicIDPost(sessionID: string, topicID: string, options?: any) {
            return SessionsApiFp(configuration).sessionsSessionIDTopicIDPost(sessionID, topicID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all the topics in a session
         * @param {string} sessionID ID of session to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsSessionIDTopicsGet(sessionID: string, options?: any) {
            return SessionsApiFp(configuration).sessionsSessionIDTopicsGet(sessionID, options)(fetch, basePath);
        },
    };
};

/**
 * SessionsApi - object-oriented interface
 * @export
 * @class SessionsApi
 * @extends {BaseAPI}
 */
export class SessionsApi extends BaseAPI {
    /**
     * Get all the available session names.
     * @summary Get all the sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsGet(options?: any) {
        return SessionsApiFp(this.configuration).sessionsGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all the messages in a session
     * @param {} sessionID ID of session to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsSessionIDGet(sessionID: string, options?: any) {
        return SessionsApiFp(this.configuration).sessionsSessionIDGet(sessionID, options)(this.fetch, this.basePath);
    }

    /**
     * Based on the timestamp of the original message, and the current (simulation) time, the messages are published in the original order.
     * @summary Play all the messages in the session
     * @param {} sessionID ID of session to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsSessionIDPost(sessionID: string, options?: any) {
        return SessionsApiFp(this.configuration).sessionsSessionIDPost(sessionID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all the messages in a session topic
     * @param {} sessionID ID of session to return
     * @param {} topicID ID of topic to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsSessionIDTopicIDGet(sessionID: string, topicID: string, options?: any) {
        return SessionsApiFp(this.configuration).sessionsSessionIDTopicIDGet(sessionID, topicID, options)(this.fetch, this.basePath);
    }

    /**
     * Based on the timestamp of the original message, and the current (simulation) time, the messages are published in the original order.
     * @summary Play all the messages in the session topic
     * @param {} sessionID ID of session to return
     * @param {} topicID ID of topic to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsSessionIDTopicIDPost(sessionID: string, topicID: string, options?: any) {
        return SessionsApiFp(this.configuration).sessionsSessionIDTopicIDPost(sessionID, topicID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all the topics in a session
     * @param {} sessionID ID of session to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsSessionIDTopicsGet(sessionID: string, options?: any) {
        return SessionsApiFp(this.configuration).sessionsSessionIDTopicsGet(sessionID, options)(this.fetch, this.basePath);
    }

}

